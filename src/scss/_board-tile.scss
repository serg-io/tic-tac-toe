board-tile {
	position: relative;
	cursor: pointer;
	will-change: transform;
	perspective: #{ $tile-perspective }px;

	// Assign a responsive size to each tile.
	@include responsive-tile;

	// Disable mouse events if the tile has a symbol assigned.
	&[symbol] {
		pointer-events: none;
	}

	/**
	 * Space the tiles vertically by setting the "margin-bottom" of the first 6 tiles to auto and
	 * the "margin-top" of the last 6 tiles to auto.
	 */
	&:nth-of-type(-n+6) {
		margin-bottom: auto;
	}
	&:nth-of-type(n+4) {
		margin-top: auto;
	}

	/**
	 * The symbol images are not displayed initially. The corresponding symbol image is shown when
	 * the <board-tile> has a "symbol" attribute.
	 */
	img {
		display: none;
		@include absolute-100;
	}
	&[symbol="x"] img.x-symbol,
	&[animation-symbol="x"] img.x-symbol {
		display: block;
	}
	&[symbol="o"] img.o-symbol,
	&[animation-symbol="o"] img.o-symbol {
		display: block;
	}

	/**
	 * Each tile has two shadows that are animated when the tile is flipped.
	 */
	.umbra,
	.penumbra {
		@include absolute-100;
		pointer-events: none;
		backface-visibility: visible;

		@include ease-in-out($flip-duration);
	}
	.umbra {
		background: url("/v{{ version }}/img/umbra.svg") center center/100% no-repeat;
		opacity: .3;
	}
	.penumbra {
		background: url("/v{{ version }}/img/penumbra.svg") center center/100% no-repeat;
		opacity: 0;
	}

	// Front and back sides of the tile.
	.front,
	.back {
		@include absolute-100;
		display: flex;
		align-items: center;
		justify-content: center;
		pointer-events: none;
		background-color: $gray-200;
		backface-visibility: hidden;

		@include ease-in-out($flip-duration);
	}

	// The back side of the tile is initially rotated 180deg.
	.back {
		transform: rotateY(180deg);
	}

	/**
	 * Pause all animations when the board is still rendering. The "rendering" class is removed
	 * when the background of the board finishes animating.
	 */
	.board.rendering & {
		.umbra,
		.penumbra,
		.front,
		.back {
			animation-play-state: paused;
		}
	}

	/**
	 * When the tile if flipping, increase its z-index and animate the shadows.
	 */
	&.flipping {
		z-index: 100;

		.umbra { animation-name: flip-umbra; }
		.penumbra { animation-name: flip-penumbra; }
	}

	/**
	 * Set the corresponding animation for the front and back sides of the tile based on the
	 * "flip-side-up" attribute of the <board-tile>. If the "flip-side-up" attribute is "front",
	 * the front side is flipped up and the back side is flipped down. If the attribute is "back",
	 * the front side is flipped down and the back side is flipped up.
	 */
	&[flip-side-up="front"] {
		.front { animation-name: flip-side-up; }
		.back { animation-name: flip-side-down; }
	}
	&[flip-side-up="back"] {
		.front { animation-name: flip-side-down; }
		.back { animation-name: flip-side-up; }
	}
}

@keyframes flip-side-down {
	0% { transform: translateZ(-200px) rotateY(0deg) scale(#{ $tile-scale }); }
	15% { transform: translateZ(-100px) rotateY(0deg) scale(#{ $tile-scale }); }
	65% { transform: translateZ(-100px) rotateY(180deg) scale(#{ $tile-scale }); }
	100% { transform: translateZ(-200px) rotateY(180deg) scale(#{ $tile-scale }); }
}

@keyframes flip-side-up {
	0% { transform: translateZ(-200px) rotateY(180deg) scale(#{ $tile-scale }); }
	15% { transform: translateZ(-100px) rotateY(180deg) scale(#{ $tile-scale }); }
	65% { transform: translateZ(-100px) rotateY(360deg) scale(#{ $tile-scale }); }
	100% { transform: translateZ(-200px) rotateY(360deg) scale(#{ $tile-scale }); }
}

@keyframes flip-umbra {
	0% {
		opacity: .3;
		transform: translateY(2px) rotateY(0deg) scale(1);
	}

	15% {
		opacity: 0;
		transform: translateY(10px) rotateY(0deg) scale(#{ $tile-scale });
	}

	65% {
		opacity: 0;
		transform: translateY(10px) rotateY(180deg) scale(#{ $tile-scale });
	}

	100% {
		opacity: .3;
		transform: translateY(2px) rotateY(180deg) scale(1);
	}
}

@keyframes flip-penumbra {
	0% {
		opacity: 0;
		transform: translateY(2px) rotateY(0deg) scale(1);
	}

	15% {
		opacity: .5;
		transform: translateY(10px) rotateY(0deg) scale(#{ $tile-scale });
	}

	65% {
		opacity: .5;
		transform: translateY(10px) rotateY(180deg) scale(#{ $tile-scale });
	}

	100% {
		opacity: 0;
		transform: translateY(2px) rotateY(180deg) scale(1);
	}
}